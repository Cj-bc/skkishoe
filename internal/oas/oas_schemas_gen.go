// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"io"
)

// Ref: #/components/schemas/candidate
type Candidate struct {
	Candidate  OptString `json:"candidate"`
	Annotation OptString `json:"annotation"`
}

// GetCandidate returns the value of Candidate.
func (s *Candidate) GetCandidate() OptString {
	return s.Candidate
}

// GetAnnotation returns the value of Annotation.
func (s *Candidate) GetAnnotation() OptString {
	return s.Annotation
}

// SetCandidate sets the value of Candidate.
func (s *Candidate) SetCandidate(val OptString) {
	s.Candidate = val
}

// SetAnnotation sets the value of Annotation.
func (s *Candidate) SetAnnotation(val OptString) {
	s.Annotation = val
}

type CandidatesGetOKApplicationJSON []Candidate

func (*CandidatesGetOKApplicationJSON) candidatesGetRes() {}

type CandidatesGetOKText struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s CandidatesGetOKText) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*CandidatesGetOKText) candidatesGetRes() {}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
